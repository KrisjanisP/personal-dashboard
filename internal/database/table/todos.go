//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Todos = newTodosTable("", "todos", "")

type todosTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	UserID      sqlite.ColumnInteger
	Job         sqlite.ColumnString
	Name        sqlite.ColumnString
	Description sqlite.ColumnString
	Deadline    sqlite.ColumnDate
	Priority    sqlite.ColumnInteger
	Finished    sqlite.ColumnBool
	CreatedAt   sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type TodosTable struct {
	todosTable

	EXCLUDED todosTable
}

// AS creates new TodosTable with assigned alias
func (a TodosTable) AS(alias string) *TodosTable {
	return newTodosTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TodosTable with assigned schema name
func (a TodosTable) FromSchema(schemaName string) *TodosTable {
	return newTodosTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TodosTable with assigned table prefix
func (a TodosTable) WithPrefix(prefix string) *TodosTable {
	return newTodosTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TodosTable with assigned table suffix
func (a TodosTable) WithSuffix(suffix string) *TodosTable {
	return newTodosTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTodosTable(schemaName, tableName, alias string) *TodosTable {
	return &TodosTable{
		todosTable: newTodosTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newTodosTableImpl("", "excluded", ""),
	}
}

func newTodosTableImpl(schemaName, tableName, alias string) todosTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		UserIDColumn      = sqlite.IntegerColumn("user_id")
		JobColumn         = sqlite.StringColumn("job")
		NameColumn        = sqlite.StringColumn("name")
		DescriptionColumn = sqlite.StringColumn("description")
		DeadlineColumn    = sqlite.DateColumn("deadline")
		PriorityColumn    = sqlite.IntegerColumn("priority")
		FinishedColumn    = sqlite.BoolColumn("finished")
		CreatedAtColumn   = sqlite.TimestampColumn("created_at")
		allColumns        = sqlite.ColumnList{IDColumn, UserIDColumn, JobColumn, NameColumn, DescriptionColumn, DeadlineColumn, PriorityColumn, FinishedColumn, CreatedAtColumn}
		mutableColumns    = sqlite.ColumnList{UserIDColumn, JobColumn, NameColumn, DescriptionColumn, DeadlineColumn, PriorityColumn, FinishedColumn, CreatedAtColumn}
	)

	return todosTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		Job:         JobColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Deadline:    DeadlineColumn,
		Priority:    PriorityColumn,
		Finished:    FinishedColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
