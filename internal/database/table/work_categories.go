//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var WorkCategories = newWorkCategoriesTable("", "work_categories", "")

type workCategoriesTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnInteger
	UserID       sqlite.ColumnInteger
	Abbreviation sqlite.ColumnString
	Description  sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type WorkCategoriesTable struct {
	workCategoriesTable

	EXCLUDED workCategoriesTable
}

// AS creates new WorkCategoriesTable with assigned alias
func (a WorkCategoriesTable) AS(alias string) *WorkCategoriesTable {
	return newWorkCategoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkCategoriesTable with assigned schema name
func (a WorkCategoriesTable) FromSchema(schemaName string) *WorkCategoriesTable {
	return newWorkCategoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkCategoriesTable with assigned table prefix
func (a WorkCategoriesTable) WithPrefix(prefix string) *WorkCategoriesTable {
	return newWorkCategoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkCategoriesTable with assigned table suffix
func (a WorkCategoriesTable) WithSuffix(suffix string) *WorkCategoriesTable {
	return newWorkCategoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkCategoriesTable(schemaName, tableName, alias string) *WorkCategoriesTable {
	return &WorkCategoriesTable{
		workCategoriesTable: newWorkCategoriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newWorkCategoriesTableImpl("", "excluded", ""),
	}
}

func newWorkCategoriesTableImpl(schemaName, tableName, alias string) workCategoriesTable {
	var (
		IDColumn           = sqlite.IntegerColumn("id")
		UserIDColumn       = sqlite.IntegerColumn("user_id")
		AbbreviationColumn = sqlite.StringColumn("abbreviation")
		DescriptionColumn  = sqlite.StringColumn("description")
		allColumns         = sqlite.ColumnList{IDColumn, UserIDColumn, AbbreviationColumn, DescriptionColumn}
		mutableColumns     = sqlite.ColumnList{UserIDColumn, AbbreviationColumn, DescriptionColumn}
	)

	return workCategoriesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		UserID:       UserIDColumn,
		Abbreviation: AbbreviationColumn,
		Description:  DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
