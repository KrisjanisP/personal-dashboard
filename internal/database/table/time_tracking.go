//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var TimeTracking = newTimeTrackingTable("", "time_tracking", "")

type timeTrackingTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnInteger
	UserID     sqlite.ColumnInteger
	CategoryID sqlite.ColumnInteger
	StartTime  sqlite.ColumnTimestamp
	EndTime    sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type TimeTrackingTable struct {
	timeTrackingTable

	EXCLUDED timeTrackingTable
}

// AS creates new TimeTrackingTable with assigned alias
func (a TimeTrackingTable) AS(alias string) *TimeTrackingTable {
	return newTimeTrackingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TimeTrackingTable with assigned schema name
func (a TimeTrackingTable) FromSchema(schemaName string) *TimeTrackingTable {
	return newTimeTrackingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TimeTrackingTable with assigned table prefix
func (a TimeTrackingTable) WithPrefix(prefix string) *TimeTrackingTable {
	return newTimeTrackingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TimeTrackingTable with assigned table suffix
func (a TimeTrackingTable) WithSuffix(suffix string) *TimeTrackingTable {
	return newTimeTrackingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTimeTrackingTable(schemaName, tableName, alias string) *TimeTrackingTable {
	return &TimeTrackingTable{
		timeTrackingTable: newTimeTrackingTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newTimeTrackingTableImpl("", "excluded", ""),
	}
}

func newTimeTrackingTableImpl(schemaName, tableName, alias string) timeTrackingTable {
	var (
		IDColumn         = sqlite.IntegerColumn("id")
		UserIDColumn     = sqlite.IntegerColumn("user_id")
		CategoryIDColumn = sqlite.IntegerColumn("category_id")
		StartTimeColumn  = sqlite.TimestampColumn("start_time")
		EndTimeColumn    = sqlite.TimestampColumn("end_time")
		allColumns       = sqlite.ColumnList{IDColumn, UserIDColumn, CategoryIDColumn, StartTimeColumn, EndTimeColumn}
		mutableColumns   = sqlite.ColumnList{UserIDColumn, CategoryIDColumn, StartTimeColumn, EndTimeColumn}
	)

	return timeTrackingTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		UserID:     UserIDColumn,
		CategoryID: CategoryIDColumn,
		StartTime:  StartTimeColumn,
		EndTime:    EndTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
